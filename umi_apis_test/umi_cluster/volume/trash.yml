
config:
    name: "Cluster Volume Trash Test"
    base_url: ${get_cluster_url()}
    parameters:
        req_host-host01-host02-host03: ${P(umi_cluster/data/storage.csv)}
    variables:
        vol_name: vol-01
        mode: Replica

teststeps:
-
    name: Cluster Volume Trash
    request:
        method: POST
        url: "/cluster/volume/trash"
        json: {
            "req_host": "$req_host",
            "vol_name": "$vol_name",
            "is_enable": true
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Cluster Volume Trash Dir
    request:
        method: POST
        url: "/cluster/volume/trash/trash_dir"
        json: {
            "req_host": "$req_host",
            "vol_name": "$vol_name",
            "trash_dir": ".trashcan"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Cluster Volume Trash Eliminate Path
    request:
        method: POST
        url: "/cluster/volume/trash/eliminate_path"
        json: {
            "req_host": "$req_host",
            "vol_name": "$vol_name",
            "eliminate_path": "testvol"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Cluster Volume Trash Max Filesize
    request:
        method: POST
        url: "/cluster/volume/trash/max_filesize"
        json: {
            "req_host": "$req_host",
            "vol_name": "$vol_name",
            "max_filesize": "5MB"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Cluster Volume Trash Internal Op
    request:
        method: POST
        url: "/cluster/volume/trash/internal_op"
        json: {
            "req_host": "$req_host",
            "vol_name": "$vol_name",
            "is_enable": false
        }
    validate:
        - eq: ["status_code", 200]

