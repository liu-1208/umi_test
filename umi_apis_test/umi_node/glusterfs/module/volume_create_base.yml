
config:
    name: "request methods testcase with functions"
    base_url: ${get_node_url()}
    # parameters:
    #     host01-host02: ${P(umi_node/data/storage.csv)}
    # parameters:
    #     host_ip_01-host_ip_02: ${P(umi_node/data/glusterfs.csv)}
    #     mode-host01-host02-host03: ${P(umi_node/data/storage.csv)}
    variables:
        host01: "${get_host_once(host01)}"
        host02: "${get_host_once(host02)}"
        host03: "${get_host_once(host03)}"
        vol_name: pytest-vol-01
        mode: replica

teststeps:
-
    name: Gluster Peer Probe
    testcase: umi_node/glusterfs/module/gluster_peer_probe.yml
-
    name: Gluster Volume Create Base
    variables:
        replica: ${get_value_by_mode($mode, replica)}
        arbiter: ${get_value_by_mode($mode, arbiter)}
        disperse_data: ${get_value_by_mode($mode, disperse_data)}
        redundancy: ${get_value_by_mode($mode, redundancy)}
    setup_hooks:
        - ${pytest_volume_clean(vol_name=$vol_name)}
    request:
        method: POST
        url: "/gluster/volume/create"
        json: {
          "vol_name": "$vol_name",
          "bricks": [
            "$host01:/data/${get_uuid_with_uuid_mark(uuid_01)}/$vol_name",
            "$host02:/data/${get_uuid_with_uuid_mark(uuid_02)}/$vol_name",
            "$host03:/data/${get_uuid_with_uuid_mark(uuid_03)}/$vol_name"
          ],
          "replica": "$replica",
          "arbiter": "$arbiter",
          "disperse_data": "$disperse_data",
          "redundancy": "$redundancy",
          "transport": "tcp",
          "force": true
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Gluster Volume Start
    request:
        method: POST
        url: "/gluster/volume/start"
        json: {
          "vol_name": "$vol_name",
          "force": true
        }
    validate:
        - eq: ["status_code", 200]

