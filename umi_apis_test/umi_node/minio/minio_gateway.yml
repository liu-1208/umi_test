
config:
    name: "request methods testcase with functions"
    # base_url: ${ENV(node_url)}
    base_url: ${get_node_url()}
    parameters:
        host_ip_01-host_ip_02: ${P(umi_node/data/glusterfs.csv)}
        admin_user-admin_password-api_port-console_port-username-password-group-bucket-policy: ${P(umi_node/data/minio_gateway.csv)}
    variables:
        config: pytest-config01

teststeps:
-
    name: Minio Gateway Service Init
    request:
        method: POST
        url: "/minio/gateway/service/init"
        json: {}
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Config Update
    request:
        method: POST
        url: "/minio/gateway/config/update"
        json: {
            "config": "$config",
            "minio_admin_user": "$admin_user",
            "minio_admin_password": "$admin_password",
            "api_port": "$api_port",
            "console_port": "$console_port",
            "workdir": "/run/xdfs-gateway/$config"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Config List
    request:
        method: POST
        url: "/minio/gateway/config/list"
        json: {}
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Service Enable
    request:
        method: POST
        url: "/minio/gateway/service/enable"
        json: {
            "config_list": [ 
                "$config"
            ]
        }
    validate:
        - eq: ["status_code", 200]

-
    name: Minio Gateway Service Status
    request:
        method: POST
        url: "/minio/gateway/service/status"
        json: {
            "config_list": [ 
                "$config"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Bucket Update
    request:
        method: POST
        url: "/minio/gateway/bucket/update"
        json: {
            "config": "$config",
            "bucket": "$bucket",
            "policy": "none"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Bucket List
    request:
        method: POST
        url: "/minio/gateway/bucket/list"
        json: {
            "config": "$config"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Policy List
    request:
        method: POST
        url: "/minio/gateway/policy/list"
        json: {
            "config": "$config"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Policy Update
    request:
        method: POST
        url: "/minio/gateway/policy/update"
        json: {
            "config": "$config",
            "policy": "$policy",
            "raw": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    "arn:aws:s3:::$bucket/*"
                  ]
                }
              ]
            }
        }
    validate:
        - eq: ["status_code", 200]

-
    name: Minio Gateway Policy Info
    request:
        method: POST
        url: "/minio/gateway/policy/info"
        json: {
            "config": "$config",
            "policy_list": [
                "$policy"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway User List
    request:
        method: POST
        url: "/minio/gateway/user/list"
        json: {
            "config": "$config"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway User Update
    request:
        method: POST
        url: "/minio/gateway/user/update"
        json: {
            "config": "$config",
            "username": "$username",
            "password": "$password",
            "policy_list": [
              "$policy"
            ],
            "enable": true
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway User Info
    request:
        method: POST
        url: "/minio/gateway/user/info"
        json: {
            "config": "$config",
            "username_list": [
                "$username"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Gruop List
    request:
        method: POST
        url: "/minio/gateway/group/list"
        json: {
            "config": "$config"
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Gruop Update
    request:
        method: POST
        url: "/minio/gateway/group/update"
        json: {
              "config": "$config",
              "group": "$group",
              "username_list": [
                "$username"
              ],
              "policy_list": [
                "$policy"
              ],
              "enable": true
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Gruop Info
    request:
        method: POST
        url: "/minio/gateway/group/info"
        json: {
            "config": "$config",
            "group_list": [
                "$group"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway User Delete
    request:
        method: POST
        url: "/minio/gateway/user/delete"
        json: {
            "config": "$config",
            "username_list": [
                "$username"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Group Delete
    request:
        method: POST
        url: "/minio/gateway/group/delete"
        json: {
            "config": "$config",
            "group_list": [
                "$group"
            ]
        }
    validate:
        - eq: ["status_code", 200]

-
    name: Minio Gateway Policy Delete
    request:
        method: POST
        url: "/minio/gateway/policy/delete"
        json: {
            "config": "$config",
            "policy_list": [
                "$policy"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Bucket Delete
    request:
        method: POST
        url: "/minio/gateway/bucket/delete"
        json: {
            "config": "$config",
            "bucket": "$bucket",
            "force": false
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Service disable
    request:
        method: POST
        url: "/minio/gateway/service/disable"
        json: {
            "config_list": [
                "$config"
            ]
        }
    validate:
        - eq: ["status_code", 200]
-
    name: Minio Gateway Config Delete
    request:
        method: POST
        url: "/minio/gateway/config/delete"
        json: {
            "config": "$config",
            "force": false
        }
    validate:
        - eq: ["status_code", 200]

